<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label11" xml:space="preserve">
    <value>San Diego</value>
  </data>
  <data name="Label12" xml:space="preserve">
    <value>MESQUITE GRILLED RIBS CHICKEN, BEEF &amp; SANDWICHES</value>
  </data>
  <data name="Label13" xml:space="preserve">
    <value>3750 Sports Arena Blvd.</value>
  </data>
  <data name="Label14" xml:space="preserve">
    <value>Hours: Sun thru Thurs 11am to 10pm</value>
  </data>
  <data name="Label15" xml:space="preserve">
    <value>Fri and Sat to 11pm</value>
  </data>
  <data name="Label16" xml:space="preserve">
    <value>Phone (619) 226-6333</value>
  </data>
  <data name="Label17" xml:space="preserve">
    <value>www.philsbbq.net</value>
  </data>
  <data name="Label18" xml:space="preserve">
    <value>CLOSED ON MONDAY</value>
  </data>
  <data name="Label19" xml:space="preserve">
    <value>Catering Services</value>
  </data>
  <data name="Label110" xml:space="preserve">
    <value>For catering inquiries including Deliveries, On-Site Events and information about Phil’s Private Event Center</value>
  </data>
  <data name="Label111" xml:space="preserve">
    <value>PLEASE CALL: 619-814-0050</value>
  </data>
  <data name="Label112" xml:space="preserve">
    <value>Please specify Pork (Baby Back)</value>
  </data>
  <data name="Label113" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="Label114" xml:space="preserve">
    <value>Beef (Beefy) when ordering Ribs</value>
  </data>
  <data name="Label21" xml:space="preserve">
    <value>AWARD WINNING RIBS</value>
  </data>
  <data name="Label22" xml:space="preserve">
    <value>Baby Back Rib Dinners</value>
  </data>
  <data name="Label23" xml:space="preserve">
    <value>(includes 2 small sides or 1 large side)</value>
  </data>
  <data name="Label24" xml:space="preserve">
    <value>Full Rib Dinner (10 to 12 Bones)</value>
  </data>
  <data name="Label25" xml:space="preserve">
    <value>Half Rib Dinner (6 to 7 Bones)</value>
  </data>
  <data name="Label26" xml:space="preserve">
    <value>Quarter Rib Dinner (4 Bones)</value>
  </data>
  <data name="Label27" xml:space="preserve">
    <value>Baby Back Ribs Only</value>
  </data>
  <data name="Label28" xml:space="preserve">
    <value>(Ribs Only, No Side Orders)</value>
  </data>
  <data name="Label29" xml:space="preserve">
    <value>Full Rib Only (10 to 12 Bones)</value>
  </data>
  <data name="Label210" xml:space="preserve">
    <value>Half Rib Only (6 to 7 Bones)</value>
  </data>
  <data name="Label211" xml:space="preserve">
    <value>Beefy Rib Dinners</value>
  </data>
  <data name="Label212" xml:space="preserve">
    <value>(includes 2 small sides or 1 large side)</value>
  </data>
  <data name="Label213" xml:space="preserve">
    <value>Full Beef Rib Dinner (5 Bones)</value>
  </data>
  <data name="Label214" xml:space="preserve">
    <value>Beef Rib Dinner (3 Bones)</value>
  </data>
  <data name="Label215" xml:space="preserve">
    <value>Beefy Ribs Only</value>
  </data>
  <data name="Label216" xml:space="preserve">
    <value>(Ribs Only, No Side)</value>
  </data>
  <data name="Label217" xml:space="preserve">
    <value>Full Beef Rib Only (5 Bones)</value>
  </data>
  <data name="Label218" xml:space="preserve">
    <value>One Beef Bone Sampler</value>
  </data>
  <data name="Label219" xml:space="preserve">
    <value>PHIL’S TICKLERS</value>
  </data>
  <data name="Label220" xml:space="preserve">
    <value>Ticklers Include: 2 Onion Rings, Slaw and Fresh Cut Fries</value>
  </data>
  <data name="Label221" xml:space="preserve">
    <value>-no substitutions please-</value>
  </data>
  <data name="Label222" xml:space="preserve">
    <value>Baby Back Rib Tickler (3 Bones)</value>
  </data>
  <data name="Label223" xml:space="preserve">
    <value>Beefy Rib Tickler (1 Bone)</value>
  </data>
  <data name="Label224" xml:space="preserve">
    <value>Chick Tickler</value>
  </data>
  <data name="Label225" xml:space="preserve">
    <value>Chunks of white meal chicken seasoned and BBQ’d.</value>
  </data>
  <data name="Label31" xml:space="preserve">
    <value>Mesquite Grilled Chicken</value>
  </data>
  <data name="Label32" xml:space="preserve">
    <value>BBQ Chicken Dinners</value>
  </data>
  <data name="Label33" xml:space="preserve">
    <value>(includes 2 small sides of 1 large side)</value>
  </data>
  <data name="Label34" xml:space="preserve">
    <value>Half Chicken Dinner</value>
  </data>
  <data name="Label35" xml:space="preserve">
    <value>Half Chicken Dinner (All White)</value>
  </data>
  <data name="Label36" xml:space="preserve">
    <value>Quarter Chicken Dinner</value>
  </data>
  <data name="Label37" xml:space="preserve">
    <value>BBQ Chicken Only</value>
  </data>
  <data name="Label38" xml:space="preserve">
    <value>(Chicken Only, No Sides)</value>
  </data>
  <data name="Label39" xml:space="preserve">
    <value>Half Chicken Only</value>
  </data>
  <data name="Label310" xml:space="preserve">
    <value>Half Chicken Only (All White)</value>
  </data>
  <data name="Label311" xml:space="preserve">
    <value>Quarter Chicken Only</value>
  </data>
  <data name="Label312" xml:space="preserve">
    <value>The Best of Both</value>
  </data>
  <data name="Label313" xml:space="preserve">
    <value>(includes 2 small sides or 1 large side)</value>
  </data>
  <data name="Label314" xml:space="preserve">
    <value>Baby Back Rib &amp; Chicken Dinner</value>
  </data>
  <data name="Label315" xml:space="preserve">
    <value>4 Bones and ¼ Chicken BBQ’d</value>
  </data>
  <data name="Label316" xml:space="preserve">
    <value>Baby Back Rib &amp; Chick-less Dinner</value>
  </data>
  <data name="Label317" xml:space="preserve">
    <value>4 Bones with chunks of white breast meat chicken seasoned &amp; BBQ’d</value>
  </data>
  <data name="Label318" xml:space="preserve">
    <value>Beefy Rib &amp; Chicken Dinner</value>
  </data>
  <data name="Label319" xml:space="preserve">
    <value>2 Bones and ¼ Chicken BBQ’d</value>
  </data>
  <data name="Label320" xml:space="preserve">
    <value>Beefy Rib &amp; Chick-less Dinner</value>
  </data>
  <data name="Label321" xml:space="preserve">
    <value>2 Bones with chunks of white breast meat chicken seasoned &amp; BBQ’d</value>
  </data>
  <data name="Label322" xml:space="preserve">
    <value>Salads</value>
  </data>
  <data name="Label323" xml:space="preserve">
    <value>Caesar (homemade dressing)</value>
  </data>
  <data name="Label324" xml:space="preserve">
    <value>Spring Mix</value>
  </data>
  <data name="Label325" xml:space="preserve">
    <value>Add Grilled Chicken</value>
  </data>
  <data name="Label41" xml:space="preserve">
    <value>Sandwiches</value>
  </data>
  <data name="Label42" xml:space="preserve">
    <value>BBQ Broham (Pulled Pork)</value>
  </data>
  <data name="Label43" xml:space="preserve">
    <value>Seasoned and char-grilled, on a bed of Cole Slaw topped with BBQ sauce</value>
  </data>
  <data name="Label44" xml:space="preserve">
    <value>El Toro</value>
  </data>
  <data name="Label45" xml:space="preserve">
    <value>Char-grilled deli sliced tri-tip topped with BBQ sauce</value>
  </data>
  <data name="Label46" xml:space="preserve">
    <value>BBQ Cheese Burger</value>
  </data>
  <data name="Label47" xml:space="preserve">
    <value>½ lb. Ground chuck patty char-grilled, topped with cheese, an onion ring, and BBQ sauce</value>
  </data>
  <data name="Label48" xml:space="preserve">
    <value>BBQ Turkey Burger</value>
  </data>
  <data name="Label49" xml:space="preserve">
    <value>BBQ Chicken Breast</value>
  </data>
  <data name="Label410" xml:space="preserve">
    <value>BBQ Garden Veggie Burger</value>
  </data>
  <data name="Label411" xml:space="preserve">
    <value>Colossal Onion Rings</value>
  </data>
  <data name="Label412" xml:space="preserve">
    <value>Fresh Batter Dipped</value>
  </data>
  <data name="Label413" xml:space="preserve">
    <value>Sides &amp; More</value>
  </data>
  <data name="Label414" xml:space="preserve">
    <value>Small Serving</value>
  </data>
  <data name="Label415" xml:space="preserve">
    <value>Fresh Cut Fries, Sweet Baked Beans, Fresh Cole Slaw, Potato Salad, Macaroni Salad</value>
  </data>
  <data name="Label416" xml:space="preserve">
    <value>Extras</value>
  </data>
  <data name="Label417" xml:space="preserve">
    <value>BBQ Sauce</value>
  </data>
  <data name="Label418" xml:space="preserve">
    <value>Cheese</value>
  </data>
  <data name="Label419" xml:space="preserve">
    <value>Ranch</value>
  </data>
  <data name="Label420" xml:space="preserve">
    <value>Pie</value>
  </data>
  <data name="Label421" xml:space="preserve">
    <value>Large Serving</value>
  </data>
  <data name="Label422" xml:space="preserve">
    <value>Baked Potato, Corn-on-the-Cob, Steamed Veggies, Fresh Cut Fries, Sweet Baked Beans, Fresh Cole Slaw, Potato Salad, Macaroni Salad</value>
  </data>
  <data name="Label423" xml:space="preserve">
    <value>Beverages</value>
  </data>
  <data name="Label424" xml:space="preserve">
    <value>Coca Cola</value>
  </data>
  <data name="Label425" xml:space="preserve">
    <value>Fountain Drinks</value>
  </data>
  <data name="Label426" xml:space="preserve">
    <value>(free Refill)</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>$20.99</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>$14.99</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>$10.99</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>$18.99</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>$12.99</value>
  </data>
  <data name="p6" xml:space="preserve">
    <value>$25.99</value>
  </data>
  <data name="p7" xml:space="preserve">
    <value>$18.99</value>
  </data>
  <data name="p8" xml:space="preserve">
    <value>$23.99</value>
  </data>
  <data name="p9" xml:space="preserve">
    <value>$6.55         </value>
  </data>
  <data name="p10" xml:space="preserve">
    <value>$8.49</value>
  </data>
  <data name="p11" xml:space="preserve">
    <value>$9.49</value>
  </data>
  <data name="p12" xml:space="preserve">
    <value>$7.49</value>
  </data>
  <data name="p13" xml:space="preserve">
    <value>$10.49</value>
  </data>
  <data name="p14" xml:space="preserve">
    <value>$11.49</value>
  </data>
  <data name="p15" xml:space="preserve">
    <value>$8.49</value>
  </data>
  <data name="p16" xml:space="preserve">
    <value>$8.49</value>
  </data>
  <data name="p17" xml:space="preserve">
    <value>$9.49</value>
  </data>
  <data name="p18" xml:space="preserve">
    <value>$6.49</value>
  </data>
  <data name="p19" xml:space="preserve">
    <value>$14.49</value>
  </data>
  <data name="p20" xml:space="preserve">
    <value>$14.49</value>
  </data>
  <data name="p21" xml:space="preserve">
    <value>$17.99</value>
  </data>
  <data name="p22" xml:space="preserve">
    <value>$17.99</value>
  </data>
  <data name="p23" xml:space="preserve">
    <value>$3.99/5.99</value>
  </data>
  <data name="p24" xml:space="preserve">
    <value>$2.99/4.99</value>
  </data>
  <data name="p25" xml:space="preserve">
    <value>$3.25</value>
  </data>
  <data name="p26" xml:space="preserve">
    <value>$8.99</value>
  </data>
  <data name="p27" xml:space="preserve">
    <value>$8.99</value>
  </data>
  <data name="p28" xml:space="preserve">
    <value>$8.49</value>
  </data>
  <data name="p29" xml:space="preserve">
    <value>$7.79</value>
  </data>
  <data name="p30" xml:space="preserve">
    <value>$7.99</value>
  </data>
  <data name="p31" xml:space="preserve">
    <value>$7.79</value>
  </data>
  <data name="p32" xml:space="preserve">
    <value>$5.75/ $8.75</value>
  </data>
  <data name="p33" xml:space="preserve">
    <value>($2.75)</value>
  </data>
  <data name="p34" xml:space="preserve">
    <value>$5.93</value>
  </data>
  <data name="p35" xml:space="preserve">
    <value>.25¢</value>
  </data>
  <data name="p36" xml:space="preserve">
    <value>.50¢</value>
  </data>
  <data name="p37" xml:space="preserve">
    <value>$3.00</value>
  </data>
  <data name="p38" xml:space="preserve">
    <value>($3.75)</value>
  </data>
  <data name="p39" xml:space="preserve">
    <value>$1.99</value>
  </data>
</root>